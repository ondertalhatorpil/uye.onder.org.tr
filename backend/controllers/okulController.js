// controllers/okulController.js
const { pool } = require('../config/database');

class OkulController {
  
  // ===== OKUL ARAMA (KULLANICILAR Ä°Ã‡Ä°N) =====
  
  // Okul arama - Register ve Profile iÃ§in
  static async searchOkullar(req, res) {
    try {
      const { okul_turu, il, ilce, search, limit = 20, offset = 0 } = req.query;

      if (!okul_turu || !['ortaokul', 'lise'].includes(okul_turu)) {
        return res.status(400).json({
          success: false,
          error: 'Okul tÃ¼rÃ¼ belirtilmeli (ortaokul/lise)'
        });
      }

      let whereConditions = ['okul_turu = ?'];
      let params = [okul_turu];

      // Ä°l filtresi (zorunlu olabilir)
      if (il) {
        whereConditions.push('il_adi = ?');
        params.push(il.toUpperCase().trim());
      }

      // Ä°lÃ§e filtresi
      if (ilce) {
        whereConditions.push('ilce_adi = ?');
        params.push(ilce.toUpperCase().trim());
      }

      // Arama filtresi (okul adÄ±nda arama)
      if (search && search.trim()) {
        whereConditions.push('kurum_adi LIKE ?');
        params.push(`%${search.trim()}%`);
      }

      const countQuery = `SELECT COUNT(*) as total FROM okullar WHERE ${whereConditions.join(' AND ')}`;
      const [countResult] = await pool.execute(countQuery, params);
      const total = countResult[0].total;

      const searchQuery = `
        SELECT id, il_adi, ilce_adi, kurum_adi, kurum_kodu
        FROM okullar 
        WHERE ${whereConditions.join(' AND ')}
        ORDER BY kurum_adi ASC
        LIMIT ? OFFSET ?
      `;

      params.push(parseInt(limit), parseInt(offset));

      const [okullar] = await pool.execute(searchQuery, params);

      res.json({
        success: true,
        okullar: okullar,
        pagination: {
          total: total,
          limit: parseInt(limit),
          offset: parseInt(offset),
          hasMore: (parseInt(offset) + parseInt(limit)) < total
        }
      });

    } catch (error) {
      console.error('Okul arama hatasÄ±:', error);
      res.status(500).json({
        success: false,
        error: 'Okul arama iÅŸlemi baÅŸarÄ±sÄ±z: ' + error.message
      });
    }
  }

  // Ä°l bazÄ±nda okul listesi - Select option'larÄ± iÃ§in
  static async getOkullarByIl(req, res) {
    try {
      const { okul_turu, il } = req.params;
      const { ilce, limit = 100 } = req.query;

      if (!['ortaokul', 'lise'].includes(okul_turu)) {
        return res.status(400).json({
          success: false,
          error: 'GeÃ§ersiz okul tÃ¼rÃ¼'
        });
      }

      let query = `
        SELECT id, il_adi, ilce_adi, kurum_adi
        FROM okullar 
        WHERE okul_turu = ? AND il_adi = ?
      `;
      let params = [okul_turu, il.toUpperCase().trim()];

      if (ilce) {
        query += ` AND ilce_adi = ?`;
        params.push(ilce.toUpperCase().trim());
      }

      query += ` ORDER BY kurum_adi ASC LIMIT ?`;
      params.push(parseInt(limit));

      const [okullar] = await pool.execute(query, params);

      res.json({
        success: true,
        okullar: okullar,
        count: okullar.length
      });

    } catch (error) {
      console.error('Ä°l bazÄ±nda okul listeleme hatasÄ±:', error);
      res.status(500).json({
        success: false,
        error: 'Okul listesi alÄ±namadÄ±: ' + error.message
      });
    }
  }

  // Okul detayÄ± - Profil sayfasÄ±nda gÃ¶sterim iÃ§in
  static async getOkulById(req, res) {
    try {
      const { id } = req.params;

      const [okul] = await pool.execute(
        'SELECT id, il_adi, ilce_adi, kurum_adi, kurum_kodu, okul_turu FROM okullar WHERE id = ?',
        [id]
      );

      if (!okul[0]) {
        return res.status(404).json({
          success: false,
          error: 'Okul bulunamadÄ±'
        });
      }

      res.json({
        success: true,
        okul: okul[0]
      });

    } catch (error) {
      console.error('Okul detay hatasÄ±:', error);
      res.status(500).json({
        success: false,
        error: 'Okul detayÄ± alÄ±namadÄ±: ' + error.message
      });
    }
  }

  // Okul varlÄ±ÄŸÄ±nÄ± kontrol et - Validation iÃ§in
  static async checkOkulExists(req, res) {
    try {
      const { id, okul_turu } = req.params;

      const [result] = await pool.execute(
        'SELECT COUNT(*) as count FROM okullar WHERE id = ? AND okul_turu = ?',
        [id, okul_turu]
      );

      res.json({
        success: true,
        exists: result[0].count > 0
      });

    } catch (error) {
      console.error('Okul kontrol hatasÄ±:', error);
      res.status(500).json({
        success: false,
        error: 'Okul kontrolÃ¼ baÅŸarÄ±sÄ±z: ' + error.message
      });
    }
  }

  // Ä°l listesi - Okul seÃ§imi iÃ§in dropdown
  static async getIllerWithOkul(req, res) {
  try {
    const { okul_turu } = req.params;
    
    // BÃœYÃœK HARFTAN KÃœÃ‡ÃœK HARFE Ã‡EVÄ°R
    const cleanOkulTuru = okul_turu ? okul_turu.toLowerCase() : '';
    
    console.log('ðŸ“‹ Original okul_turu:', okul_turu);
    console.log('ðŸ“‹ Cleaned okul_turu:', cleanOkulTuru);

    if (!['ortaokul', 'lise'].includes(cleanOkulTuru)) {
      return res.status(400).json({
        success: false,
        error: `GeÃ§ersiz okul tÃ¼rÃ¼: "${okul_turu}". Sadece "ortaokul" veya "lise" kabul edilir.`
      });
    }

    const [iller] = await pool.execute(`
      SELECT 
        il_adi, 
        COUNT(*) as okul_sayisi
      FROM okullar 
      WHERE okul_turu = ?
      GROUP BY il_adi 
      ORDER BY il_adi ASC
    `, [cleanOkulTuru]); // Clean version kullan

    res.json({
      success: true,
      iller: iller
    });

  } catch (error) {
    console.error('Ä°l listesi hatasÄ±:', error);
    res.status(500).json({
      success: false,
      error: 'Ä°l listesi alÄ±namadÄ±: ' + error.message
    });
  }
}

  // Ä°lÃ§e listesi - Okul seÃ§imi iÃ§in dropdown
 static async getIlcelerWithOkul(req, res) {
  try {
    const { okul_turu, il } = req.params;
    const cleanOkulTuru = okul_turu ? okul_turu.toLowerCase() : '';

    if (!['ortaokul', 'lise'].includes(cleanOkulTuru)) {
      return res.status(400).json({
        success: false,
        error: 'GeÃ§ersiz okul tÃ¼rÃ¼'
      });
    }

    const [ilceler] = await pool.execute(`
      SELECT 
        ilce_adi, 
        COUNT(*) as okul_sayisi
      FROM okullar 
      WHERE okul_turu = ? AND il_adi = ? AND ilce_adi IS NOT NULL
      GROUP BY ilce_adi 
      ORDER BY ilce_adi ASC
    `, [cleanOkulTuru, il.toUpperCase().trim()]);

    res.json({
      success: true,
      ilceler: ilceler
    });

  } catch (error) {
    console.error('Ä°lÃ§e listesi hatasÄ±:', error);
    res.status(500).json({
      success: false,
      error: 'Ä°lÃ§e listesi alÄ±namadÄ±: ' + error.message
    });
  }
}


 // Okul arama - Register ve Profile iÃ§in
  static async searchOkullar(req, res) {
  try {
    const { okul_turu, il, ilce, search, limit = 20, offset = 0 } = req.query;
    const cleanOkulTuru = okul_turu ? okul_turu.toLowerCase() : '';

    if (!cleanOkulTuru || !['ortaokul', 'lise'].includes(cleanOkulTuru)) {
      return res.status(400).json({
        success: false,
        error: 'Okul tÃ¼rÃ¼ belirtilmeli (ortaokul/lise)'
      });
    }

    let whereConditions = ['okul_turu = ?'];
    let params = [cleanOkulTuru];

      // Ä°l filtresi (zorunlu olabilir)
      if (il) {
        whereConditions.push('il_adi = ?');
        params.push(il.toUpperCase().trim());
      }

      // Ä°lÃ§e filtresi
      if (ilce) {
        whereConditions.push('ilce_adi = ?');
        params.push(ilce.toUpperCase().trim());
      }

      // Arama filtresi (okul adÄ±nda arama)
      if (search && search.trim()) {
        whereConditions.push('kurum_adi LIKE ?');
        params.push(`%${search.trim()}%`);
      }

      const countQuery = `SELECT COUNT(*) as total FROM okullar WHERE ${whereConditions.join(' AND ')}`;
      const [countResult] = await pool.execute(countQuery, params);
      const total = countResult[0].total;

      const searchQuery = `
        SELECT id, il_adi, ilce_adi, kurum_adi, kurum_kodu
        FROM okullar 
        WHERE ${whereConditions.join(' AND ')}
        ORDER BY kurum_adi ASC
        LIMIT ? OFFSET ?
      `;

      params.push(parseInt(limit), parseInt(offset));

      const [okullar] = await pool.execute(searchQuery, params);

      res.json({
        success: true,
        okullar: okullar,
        pagination: {
          total: total,
          limit: parseInt(limit),
          offset: parseInt(offset),
          hasMore: (parseInt(offset) + parseInt(limit)) < total
        }
      });

    } catch (error) {
      console.error('Okul arama hatasÄ±:', error);
      res.status(500).json({
        success: false,
        error: 'Okul arama iÅŸlemi baÅŸarÄ±sÄ±z: ' + error.message
      });
    }
  }

}

module.exports = OkulController;